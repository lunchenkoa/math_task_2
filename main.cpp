#include <iostream>
#include <fstream>
#include <string>
#include "headers/de_allocate.hpp"
#include "headers/reiman_functions.hpp"

using namespace std;

/*
Riemann 
solution to the decay of an arbitrary gas-dynamic discontinuity in an ideal gas with adiabatic exponent 𝛾 =5/3
*/

int main ()
{

    // test selection
    string test;
    cout << "Choose a test!\nPossible test options: 1, 2, 3, 4" << '\n';
    cin >> test;
    cout << '\n';
    // if ((test.compare("1") != 0) | (test.compare("2") != 0) | (test.compare("3") != 0))
    // {
    //     std::cout << "Invalid test number entered" << std::endl;
    //     return 1;
    // }

    // Determining initial conditions for tests
    double ro_l, v_l, p_l, ro_r, v_r, p_r, t, gamma;
    initial_conditions(test, ro_l, v_l, p_l, ro_r, v_r, p_r, t, gamma);
    int config_state = 0;
    double c_l = 0.0, c_r = 0.0;
    config_state = check_configuration(ro_l, v_l, p_l, ro_r, v_r, p_r, gamma, c_l, c_r);
    if (config_state == 0)
    {
        cout << "Error in initial conditions - none of the configurations is suitable."<< endl;
        return 2;
    } 

    // The pressure positivity condition is tested for
    if ((2.0 / (gamma - 1.0)) * (c_l + c_r) <= (v_r - v_l))
    {
        //  The initial data is such that vacuum is generated.
        //  Program stopped.
        cout << "Vacuum is generated by data. Program stopped."<< endl;
        return 3;
    }


    // Allocate solution array
    int N = 1000;
    double * x = new double[N];
    double xl = -0.5;
    double xr = 0.5;

    double * P = new double[N];
    double * RO = new double[N];
    double * V = new double[N];

    // Solving a nonlinear equation for pressure by Newton's method
    double p_star; 
    int state_newton = 0;

    p_star = Newton_method(ro_l, v_l, p_l, c_l, ro_r, v_r, p_r, c_r, gamma, config_state, state_newton);
    if (state_newton != 0)
    {
        cout << "Error occurred when calculating P* using Newton's method."<< endl;
        return 4;
    }

    double v_star_l, ro_star_l, v_star_r, ro_star_r;
    int state_solution = 0;
    solution_calculation(ro_l, v_l, p_l, c_l, ro_r, v_r, p_r, c_r, \
                         p_star, gamma, t, config_state,V, RO, P,\
                         x, N, xl, xr, state_solution);

    if (state_solution != 0)
    {
        cout << "Error occurred when calculating solution."<< endl;
        return 5;
    }

    string res_path = "./results/res_test_" + test + ".txt";
    ofstream output(res_path);
    if (output.is_open())
    {
        for (size_t j = 0; j != N; ++j)
        {
            output << x[j] << " " << P[j] << " " << RO[j] << " " << V[j] << endl;
        }
    
        output.close();
        cout << "Result file has been written" << endl;
    }else
    {
        cout << "Enable to open result file."<< endl;
        return 6;
    }  

    delete x;
    delete P;
    delete RO;
    delete V;
    return 0;

}