#include <iostream>
#include <string>
#include <array>

#include "headers/de_allocate.hpp"
#include "headers/iof.hpp"
#include "headers/eq_sol_id_gas.hpp"

using namespace std;

/*
    Numerical solution of equations one-dimensional ideal gas dynamics with adiabatic exponent
    ùõæ = 5/3 using Harten-Lax-van Leer (HLL) method.
*/

int main ()
{
// Add test selection for single compilation

    string test = "";

    while (true)
    {
        cout << "Choose a test!\nPossible input options: 1, 2, 3\n";
        cin >> test;
        cout << '\n';

        test = "input" + test + ".txt";

        if (!((test == "input1.txt") || (test == "input2.txt") || (test == "input3.txt")))
        {
            cerr << "Invalid input!\n";
        }
        else
        {
            break;
        }
    }

// Parameter initialization:
//    rho_L (rho_R) = gas density on the left (on the right),
//    v_L   (v_R)   = gas velocity on the left (on the right),
//    p_L   (p_R)   = gas pressure on the left (on the right).

    double rho_L, v_L, p_L, rho_R, v_R, p_R;
    
    initialization(test, rho_L, v_L, p_L, rho_R, v_R, p_R);
    /*  ???????????????
        –ö–∞–∫–∏–º-—Ç–æ –æ–±—Ä–∞–∑–æ–º –Ω–∞–¥–æ —Å–¥–µ–ª–∞—Ç—å —Ç–µ–ø–µ—Ä—å —ç—Ç–∏ –Ω–∞—á–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –≤–Ω–µ—à–Ω–∏–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏, —á—Ç–æ–±—ã –∫–∞–∂–¥—ã–π —Ä–∞–∑ –∏—Ö –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Ç—É–¥–∞ —Å—é–¥–∞.
        –ú–± –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ç–∏–ø–∞ global.... –•–∑, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–µ - –Ω–∞–¥–æ –≥—É–≥–ª–∏—Ç—å.
        –ù–∞–≤–µ—Ä–Ω–æ–µ, —Å—Ç–æ–∏—Ç –∏—Ö –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –≤ –≤–µ–∫—Ç–æ—Ä u?...
    */

    // moment of time (–°–∞—à–∞ –≥–æ–≤–æ—Ä–∏–ª —á—Ç–æ-—Ç–æ –ø—Ä–æ —Ç–æ, —á—Ç–æ —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)
    double time = 0.10;

/*
    Since there is a gamma() in C++, let‚Äôs replace the letter Œ≥ with the third letter of the
    Phoenician alphabet ê§Ç (gimel) that generates it.
*/
    constexpr double gimel = 5.0 / 3.0; // Ratio of specific heats (adiabatic exponent)

// Continued definition of parameters

    // (rho, v, p) left and right
    // array<array<double, 3>, 2> u0; // –º–∞—Å—Å–∏–≤ u0 —Ä–∞–∑–º–µ—Ä–æ–º 3x2 (–æ–Ω –µ—Å—Ç—å –≤ —Ñ—É–Ω–∫—Ü–∏–∏ set_IV)
    double ** u0 = create_array(3, 2);

    // selecting the number of grid cells (N) and the Courant number (C)
    int N = 40;      // 40, 80, 160, 320      // –•–∑, –∫–∞–∫ –¥–ª—è —Å–ª—É—á–∞—è A —Å—á–∏—Ç–∞—Ç—å —á–∏—Å–ª–æ –ö—É—Ä–∞–Ω—Ç–∞ (!!!)
    double C = 0.3;  // 0.3, 0.6, 0.9

    // coordinate borders
    const double x_L = -0.5;
    const double x_R = 0.5;
    // delta x (—ç—Ç–æ –≤–∏–¥–∏–º–æ —à–∞–≥)
    double dx = (x_R - x_L) / N;
// daniel:
    int N_0 = N / 2 + 1; // —á—Ç–æ –∑–∞ zero index, —è –ø–æ–∫–∞ –Ω–µ –ø–æ–Ω (–æ–Ω –µ—Å—Ç—å –≤ —Ñ—É–Ω–∫—Ü–∏–∏ set_IV)
    // Number of nods
    int64_t number_of_nods = N + 1; // –ø–æ–∫–∞ —Ç–æ–∂–µ –Ω–µ —è—Å–Ω–æ, —ç—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –º–∞—Å—Å–∏–≤–∞

/*  
    —Ö–∑, –Ω–∞–¥–æ –ª–∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–Ω—É—Ä–∞—Ü–∏–∏ –∏ –Ω–∞ —É—Å–ª–æ–≤–∏–µ –≤–∞–∫—É—É–º–∞.
   -–Ω—É –≤–æ–æ–±—â–µ —è –Ω–µ –≤–∏–¥–µ–ª–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏... –ø–æ–∫–∞ –Ω–µ –º–æ–≥—É –Ω–∏—á–µ–≥–æ —Å–∫–∞–∑–∞—Ç—å
*/
    // // The pressure positivity condition is tested for
    // if ((2.0 / (adiabat - 1.0)) * (c_l + c_r) <= (v_r - v_l))
    // {
    //     //  The initial data is such that vacuum is generated.
    //     //  Program stopped.
    //     cout << "Vacuum is generated by data. Program stopped."<< endl;
    //     return 3;
    // }


// Allocation of memory to dynamic variables

    double * x = create_vector(number_of_nods + 2); // —Ç.–µ. –ø–æ —Ñ–∞–∫—Ç—É —ç—Ç–æ –≤–µ–∫—Ç–æ—Ä –¥–ª–∏–Ω–æ–π N+3
    double * RHO = create_vector(number_of_nods + 2);
    double * V = create_vector(number_of_nods + 2);
    double * P = create_vector(number_of_nods + 2);

    double ** u = create_array(3, number_of_nods + 2);
    double ** F = create_array(3, number_of_nods + 2);

    for (size_t i = 0; i < number_of_nods + 2; ++i)
        x[i] = x_L + (i - 1) * dx;

    set_initial_values (RHO, V, P, N_0, u0);
    real2u_or_F (RHO, V, P, u, gimel, true);
    real2u_or_F (RHO, V, P, F, gimel, false);
    godunov (u, F, number_of_nods, time, C, dx, gimel);
    u2real (RHO, V, P, u, gimel);
    save_results (test, x, P, RHO, V);

    free_vector(x);
    free_vector(RHO);
    free_vector(V);
    free_vector(P);

    free_array(u);
    free_array(F);
    free_array(u0);

    return 0;
}
