#include <iostream>
#include <fstream>
#include <string>
#include "headers/de_allocate.hpp"
#include "headers/eq_sol_id_gas.hpp"

using namespace std;

/*
Numerical solution of equations 
one-dimensional ideal gas dynamics (GD) 
with adiabatic exponent ùõæ =5/3 
using Harten-Lax-van Leer (HLL) method.
*/
const double adiabat = 5.0 / 3.0;  // –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å –∞–¥–∏–∞–±–∞—Ç—ã

int main ()
{

    // test selection
    string test;
    cout << "Choose a test!\nPossible test options: 1, 2, 3, 4 \n";
    cin >> test;
    cout << "\n";

    double ro_l, v_l, p_l, ro_r, v_r, p_r, t;
    initial_conditions(test, ro_l, v_l, p_l, ro_r, v_r, p_r, t);

    //
    int N = 0;
    double C = 0.0;
    cout << "Enter values for parameters:\n Number of grid cells (N) and Courant number (C).\nPossible options: N=[40, 80, 160, 320]; C=[0.3, 0.6, 0.9]\n";
    cin >> N >> C;
    cout << "\n";

/*  –Ø –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∞—Å—å —Ç—É—Ç. 
–≠—Ç–æ, –≤–æ–æ–±—â–µ, –º–æ–π main –¥–ª—è –∑–∞–¥–∞—á–∏ –†–∏–º–∞–Ω–∞. 
–•–∑, –∫–∞–∫ –¥–ª—è —Å–ª—É—á–∞—è A —Å—á–∏—Ç–∞—Ç—å —á–∏—Å–ª–æ –ö—É—Ä–∞–Ω—Ç–∞
+ —Ö–∑, –Ω–∞–¥–æ –ª–∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–Ω—É—Ä–∞—Ü–∏–∏ –∏ –Ω–∞ —É—Å–ª–æ–≤–∏–µ –≤–∞–∫—É—É–º–∞.
*/


    // // The pressure positivity condition is tested for
    // if ((2.0 / (adiabat - 1.0)) * (c_l + c_r) <= (v_r - v_l))
    // {
    //     //  The initial data is such that vacuum is generated.
    //     //  Program stopped.
    //     cout << "Vacuum is generated by data. Program stopped."<< endl;
    //     return 3;
    // }


    // Allocate solution array
    double * x = new double[N];
    double xl = -0.5;
    double xr = 0.5;

    double * P = new double[N];
    double * RO = new double[N];
    double * V = new double[N];

    // Solving a nonlinear equation for pressure by Newton's method
    double p_star; 
    int state_newton = 0;

    p_star = Newton_method(ro_l, v_l, p_l, c_l, ro_r, v_r, p_r, c_r, gamma, config_state, state_newton);
    if (state_newton != 0)
    {
        cout << "Error occurred when calculating P* using Newton's method."<< endl;
        return 4;
    }

    double v_star_l, ro_star_l, v_star_r, ro_star_r;
    int state_solution = 0;
    solution_calculation(ro_l, v_l, p_l, c_l, ro_r, v_r, p_r, c_r, \
                         p_star, gamma, t, config_state,V, RO, P,\
                         x, N, xl, xr, state_solution);

    if (state_solution != 0)
    {
        cout << "Error occurred when calculating solution."<< endl;
        return 5;
    }

    string res_path = "./results/res_test_" + test + ".txt";
    ofstream output(res_path);
    if (output.is_open())
    {
        for (size_t j = 0; j != N; ++j)
        {
            output << x[j] << " " << P[j] << " " << RO[j] << " " << V[j] << endl;
        }
    
        output.close();
        cout << "Result file has been written" << endl;
    }else
    {
        cout << "Enable to open result file."<< endl;
        return 6;
    }  

    delete x;
    delete P;
    delete RO;
    delete V;
    return 0;

}